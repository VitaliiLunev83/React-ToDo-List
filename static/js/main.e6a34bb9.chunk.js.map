{"version":3,"sources":["context/Context.js","Components/ToDoItem.js","Components/ToDoList.js","Components/AddTodos.js","Components/Loader.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","ToDoItem","todo","index","onChange","removeToDo","useContext","classes","complited","push","style","className","join","type","id","checked","title","onClick","ul","listStyle","margin","ToDoList","props","todos","map","key","onToggle","AddTodo","onCreate","defaultValue","useState","value","setValue","bind","event","target","clear","useInputValue","action","onSubmit","preventDefault","trim","Loader","App","setTodos","loading","setLoading","useEffect","fetch","then","response","json","Provider","filter","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6a34bb9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext();\r\n\r\n\r\nexport default Context;","import React, {useContext} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Context from \"../context/Context\";\r\n\r\nconst styles ={\r\n    li:{\r\n       display: 'flex',\r\n       justifyContent: 'space-between',\r\n       alignItems: 'center',\r\n       padding: '.5rem 1rem',\r\n       border: '1px solid grey',\r\n       borderRadius: '4px',\r\n       marginBottom: '.5rem'\r\n    },\r\n    input:{\r\n        marginRight: '1rem',\r\n\r\n    },\r\n}\r\n\r\n\r\nconst ToDoItem = ({todo, index, onChange}) => {\r\n    const {removeToDo} = useContext(Context);\r\n\r\n    const classes = [];\r\n    if (todo.complited){\r\n        classes.push('done')\r\n    }\r\n\r\n\r\n    return (\r\n        <li style={styles.li}>\r\n                <span className={classes.join('')}>\r\n                    <input type=\"checkbox\" style={styles.input}\r\n                           onChange={()=>onChange(todo.id)}\r\n                           checked={todo.complited}\r\n                    />\r\n                    <strong>{index + 1 + ')'}</strong>\r\n                    &nbsp;\r\n                    {todo.title}\r\n                </span>\r\n            <button className=\"rm\" onClick={()=>removeToDo(todo.id)}>&times;</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nToDoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number,\r\n    onChange: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default ToDoItem;","import React from \"react\";\r\nimport ToDoItem from \"./ToDoItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst styles ={\r\n    ul:{\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n}\r\nconst ToDoList = (props)=>{\r\n    return(\r\n        <ul style={styles.ul}>\r\n            {props.todos.map((todo,index)=>{\r\n                return <ToDoItem todo={todo} key={todo.id} index={index} onChange={props.onToggle}/>\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\nToDoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default ToDoList;","import React, {useState} from \"react\";\r\n\r\nfunction useInputValue(defaultValue = '') {\r\n    const [value,setValue]= useState(defaultValue);\r\n\r\n     return{\r\n         bind:{\r\n             value,\r\n             onChange: event => setValue(event.target.value)\r\n         },\r\n         clear:()=> setValue(''),\r\n         value: ()=> value,\r\n     }\r\n}\r\n\r\n\r\nfunction AddTodo({onCreate}) {\r\n    // const [value,setValue]= useState('');\r\n    const input = useInputValue('');\r\n\r\n    function submitHandler(event) {\r\n        event.preventDefault();\r\n\r\n\r\n        if(input.value().trim()){\r\n            onCreate(input.value());\r\n            input.clear();\r\n        }\r\n\r\n    }\r\n\r\n    return(\r\n        <form action=\"#\" style={{marginBottom: '1rem'}} onSubmit={submitHandler}>\r\n            <input {...input.bind}/>\r\n            <button type=\"submit\">Add ToDo</button>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n// AddTodo.propTypes = {\r\n//     onCreate: PropTypes.func.isRequired\r\n// }\r\n\r\nexport default AddTodo;"," import React from \"react\";\r\n\r\n\r\n const Loader = ()=>{\r\n     return(\r\n         <div className=\"lds-roller\" style={{display:'flex',justifyContent:'center',margin:'.5rem'}}>\r\n             <div></div>\r\n             <div></div>\r\n             <div></div>\r\n             <div></div>\r\n             <div></div>\r\n             <div></div>\r\n             <div></div>\r\n             <div></div>\r\n         </div>\r\n     )\r\n }\r\n\r\n export default Loader;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport ToDoList from \"./Components/ToDoList\";\nimport Context from \"./context/Context\";\nimport AddTodo from \"./Components/AddTodos\";\nimport Loader from \"./Components/Loader\";\n\n\nfunction App() {\n    const [todos,setTodos] = React.useState([]);\n    const[loading,setLoading] = React.useState(true);\n\n    useEffect(()=>{\n        fetch('https://jsonplaceholder.typicode.com/todos/?_limit=5')\n            .then(response => response.json())\n            .then(todos => {\n                setTodos(todos);\n                setLoading(false);\n            })\n\n    },[])\n\n    function toggleTodo(id) {\n        setTodos(\n             todos.map(todo=>{\n                if(todo.id === id){\n                    todo.complited = !todo.complited;\n                }\n                return todo;\n            })\n\n        );\n\n\n    };\n\n    function removeToDo(id) {\n        setTodos(\n            todos.filter(todo=>todo.id !== id)\n\n        )\n\n    }\n\n    function addToDo(title) {\n        setTodos(\n            todos.concat([{\n               title,\n               id: Date.now(),\n               complited: false\n            }])\n        )\n    }\n\n    return (\n        <Context.Provider value={{removeToDo:removeToDo}}>\n            <div className=\"wrapper\">\n                <h1>ToDoApp</h1>\n                <AddTodo onCreate={addToDo}/>\n\n                {loading && <Loader/>}\n\n                {todos.length ?(<ToDoList todos={todos} onToggle={toggleTodo}/>)  : (loading ? null : <h3>No todos</h3>)}\n\n            </div>\n        </Context.Provider>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}